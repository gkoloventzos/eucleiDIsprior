<a name="definition"></a><h2 class="title"><a>Segment_2</a></h2>
<h3 style="color:#111;">Definition</h3>
<p>An object of the class Segment_2 is a directed straight line segment in the two-dimensional Euclidean plane 2, i.e. a straight line segment [p,q] connecting two points p,q in R 2. The segment is topologically closed, i.e. the end points belong to it. Point p is called the source and q is called the target of s. The length of s is the Euclidean distance between p and q. Note that there is only a function to compute the square of the length, because otherwise we had to perform a square root operation which is not defined for all number types, which is expensive, and may not be exact.</p>


<a name="constructor"></a><h3 style="color:#111;">Constructor</h3>
<p><code>s = Segment_2(&lt;<a href="./point2d.php">Point_2</a>&gt; source,&lt;<a href="./point2d.php">Point_2</a>&gt; target, color=(1,1,1), visible=True)</code>
The constructor of Segment_2 class has as arguments 2 Point_2 objects for the source and target points.
Also has the color of the line will be colored and the visibility of the line.
</p>



<a name="operations"></a><h3 style="color:#111;">Operations</h3>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.source()</code>
Returns the source of s. 
</p>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.target()</code>
Returns the target of s. 
</p>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.min()</code>
Returns the point of s with lexicographically smallest coordinate. 
</p>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.max()</code>
Returns the point of s with lexicographically largest coordinate. 
</p>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.middle()</code>
Returns the point which is in the middle of s. 
</p>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.vertex( int i )</code>
Returns source or target of s: vertex(0) returns the source of s, vertex(1) returns the target of s.
</p>
<p><code><strong><a href="./point2d.php">Point_2</a></strong>  s.point( int i )</code>
Returns the vertex(i).
</p>
<p><code><strong>float</strong>  s.squared_length()</code>
Returns the squared length of s. 
</p>
<p><code><strong><a href="./direction2d.php">Direction_2</a></strong>  s.direction()</code>
Returns the direction from source to target of s.
</p>
<p><code><strong><a href="./vector2d.php">Vector_2</a></strong>  s.to_vector()</code>
Returns the vector s.target() - s.source().
</p>
<p><code><strong><a href="./segment2d.php">Segment_2</a></strong>  s.opposite()</code>
Returns a segment with source and target point interchanged. 
</p>
<p><code><strong><a href="./line2d.php">Line_2</a></strong>  s.supporting_line()</code>
Returns the line l passing through s. Line l has the same orientation as segment s. 
</p>
<p><code><strong>void</strong>  s.visual(visible=None)</code>
If the argument ommitted then it reverses the visibility.
Otherwise makes the visibility as the argument defines.
</p>
<p><code><strong>void</strong>  s.label("label")</code>
Creates a label with the argument string for the Segment_2 p.
</p>
<p><code><strong>void</strong>  s.color(x=0,y=0,z=0)</code>
If color is called as p.color() prints the color of the Segment_2<br />
If it is called with with tuple (color.green) or (256,0,0) then it changes
the color of the Segment_2.<br />
If you want to color a Segment_2 black use the visualfunction(make it invisible).
</p>

<a name="predicates"></a><h3 style="color:#111;">Predicates</h3>
<p><code><strong>bool</strong>  s.is_degenarate()</code>
Segment s is degenerate, if source and target are equal. 
</p>
<p><code><strong>bool</strong>  s.is_horizontal()</code>

</p>
<p><code><strong>bool</strong>  s.is_vertical()</code>

</p>
<p><code><strong>bool</strong>  s.has_on(<a href="./point2d.php">Point_2</a> p)</code>
A point is on s, iff it is equal to the source or target of s, or if it is in the interior of s.
</p>


