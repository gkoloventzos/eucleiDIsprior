from sys import path
path.append("/home/chfrag/src/cgal-python-0.9.1/cgal_package")

import CGAL
import visual

def prepareScene():
	visual.scene.range = 100
	visual.scene.width = 800
	visual.scene.height = 600
	visual.scene.exit_on_close(1)

class mouseClick(object):
	"""
	click = mouseClick(which_button=None)
	"""
	def __init__(self, which_button=None):
		self.button = None
		self.pos = None
		self.pick = None
		self.get(which_button)
		
	def getEvent(self):
		if visual.scene.mouse.events:
			event = visual.scene.mouse.getevent()
			if event.press:
				self.button = event.button
				self.pos = CGAL.Vector_2(event.pos.x, event.pos.y)
				self.pick = event.pick
		
	def get(self, which_button):
		if which_button is not None:
			while self.button <> which_button:
				self.getEvent()
		else:
			while self.button is None:
				self.getEvent()
		
	def __str__(self):
		return "%s button pressed at position %s" % (self.button, self.pos)


class VPoint_2(CGAL.Point_2):
	def __init__(self, vector=CGAL.Vector_2(0.0,0.0), label=None):
		self.__repr = None
		super(VPoint_2, self).__init__(vector.x(),vector.y())
		self.pos = vector
		self.color = visual.color.white
		if label is not None:
			self.label = label
		else:
			self.__label = 'X'
			self.repr = 'sphere'
		
	def label():
		doc = 'label property of VPoint_2: string'
		def fget(self):
			return self.__label
		def fset(self, label):
			self.__label = label
			self.repr = 'label'
		return locals()
	label = property(**label())
	
	def color():
		doc = 'color property of VPoint_2: is visual.color'
		def fget(self):
			return self.__color
		def fset(self, color):
			self.__color = color
			if self.__repr is not None:
				self.__repr.color = color
				if self.__reprstr == 'label':
					self.__repr.linecolor = color
		return locals()
	color = property(**color())
		
	def pos():
		doc = 'pos property: is CGAL.Vector_2(x,y)'
		def fget(self):
			return CGAL.Vector_2(self.__repr.pos.x, self.__repr.pos.y)
		def fset(self, pos):
			# parameter pos is CGAL.Vector_2(x,y)
			# self.__pos is a CGAL.Vector_2()
			self.__pos = pos
			# self.__vpos is a visual.vector(). Used for visual representation
			self.__vpos = visual.vector(pos.x(), pos.y())
			# TOCHECK: CGAL.Point_2 has no setter ?!
			super(VPoint_2, self).__init__(pos.x(), pos.y())
			# self.__repr.pos is visual.vector(x,y)
			if self.__repr is not None:
				self.__repr.pos = visual.vector(pos.x(), pos.y())
		return locals()		
	pos = property(**pos())
	
	def repr():
		doc = 'repr property: is visual.sphere() or visual.label()'
		def fget(self):
			return self.__reprstr
		def fset(self, repr):
			self.__reprstr = repr
			if self.__repr is not None:
				self.__repr.visible = False
			if repr == 'sphere':
				#TODO: Check if this is always suitable for radius
				radius = visual.scene.range.x / 100.00
				self.__repr = visual.sphere(pos=self.__vpos, radius=radius, color=self.__color)
			else:
				self.__repr = visual.label(pos=self.__vpos, text=self.__label, color=self.__color)
				self.__repr.linecolor = self.__color
		return locals()
	repr = property(**repr())

def getVisualPoints():
	points = []
	click = mouseClick()
	while click.button <> 'right':
		point = VPoint_2(click.pos)
		points.append(point)
		click = mouseClick()
	return points
	
def getVisualPointsLabeled():
	points = []
	label = 0
	click = mouseClick()
	while click.button <> 'right':
		point = VPoint_2(click.pos, label=str(label))
		points.append(point)
		click = mouseClick()
		label += 1
	return points
